@startuml expert_evaluation_sequence

actor Expert
participant "Expert Frontend" as Frontend
participant "MetaMask" as MetaMask
participant "Smart Contract\n(OfferFactory)" as Contract
participant "Blockchain" as Blockchain
participant "Server" as Server
database "Database" as DB

title Expert Evaluation Process

== Normal Flow ==
Expert -> Frontend: Select proposal to evaluate
Frontend -> Server: GET /api/v1/proposal/{proposalID}
activate Server
Server -> DB: Retrieve proposal details
DB --> Server: Return proposal data
Server --> Frontend: 200 OK with proposal details
deactivate Server
Frontend --> Expert: Display proposal details and evaluation form
Expert -> Frontend: Complete evaluation form with scores and feedback
Frontend -> Frontend: Validate evaluation data
alt Evaluation data valid
    Frontend -> MetaMask: Request transaction signature
    activate MetaMask
    MetaMask -> Expert: Prompt to sign transaction
    Expert -> MetaMask: Confirm and sign
    MetaMask -> Contract: Send signed evaluation transaction
    activate Contract
    Contract -> Blockchain: Submit transaction
    activate Blockchain
    Blockchain --> Contract: Transaction included in block
    deactivate Blockchain
    Contract --> MetaMask: Return transaction hash
    deactivate Contract
    MetaMask --> Frontend: Return transaction success
    deactivate MetaMask
    Frontend -> Server: POST /api/v1/expert/evaluation
    note right: Includes transaction hash,\nscores and feedback
    activate Server
    Server -> Blockchain: Verify transaction confirmation
    Blockchain --> Server: Confirm transaction
    Server -> Server: Validate expert authorization
    Server -> DB: Store evaluation details
    DB --> Server: Confirm storage
    Server --> Frontend: 201 Created (Evaluation submitted)
    Frontend --> Expert: Display success message
    deactivate Server
else Evaluation data invalid
    Frontend --> Expert: Display validation errors
end

== Evaluation Period Ended ==
Expert -> Frontend: Select proposal to evaluate
Frontend -> Server: GET /api/v1/proposal/{proposalID}
activate Server
Server -> DB: Retrieve proposal details
DB --> Server: Return proposal with elapsed evaluation period
Server --> Frontend: 200 OK with proposal details
deactivate Server
Frontend -> Frontend: Check evaluation deadline
Frontend --> Expert: Display "Evaluation period has ended" message
Frontend -> Frontend: Disable evaluation submission


== Conflict in Evaluations ==
Server -> Server: System detects significant\nscoring discrepancy between experts
Server -> DB: Mark proposal with "evaluation conflict" flag
DB --> Server: Confirm update
Server -> Frontend: Push notification to experts
Frontend --> Expert: Display notification "Evaluation conflict detected"
Expert -> Frontend: Access conflict resolution interface
Frontend -> Server: GET /api/v1/proposal/{id}/evaluation-conflicts
activate Server
Server -> DB: Retrieve all expert evaluations
DB --> Server: Return evaluations
Server --> Frontend: 200 OK with all evaluations
deactivate Server
Frontend --> Expert: Display all evaluations and resolution options
Expert -> Frontend: Submit revised evaluation or justification
Frontend -> MetaMask: Request new transaction signature

@enduml